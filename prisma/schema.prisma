generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  password       String
  emailVerified  Boolean    @default(false)
  publicId       String     @unique
  members        Member[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  firstName      String?
  lastName       String?
  userRoles      UserRole[]
  profilePicture String?
  dateOfBirth    DateTime?
  lastLogin      DateTime?
  isActive       Boolean    @default(true)
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

model UserRole {
  id     Int  @id @default(autoincrement())
  role   Role
  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@index([userId], name: "UserRoleIndex")
}

model Member {
  id        Int      @id @default(autoincrement())
  userId    Int
  firstName String
  lastName  String
  memberId  String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]

  @@index([userId], name: "MemberUserIndex")
}

model Ticket {
  id                  Int       @id @default(autoincrement())
  memberId            String?
  member              Member?   @relation(fields: [memberId], references: [memberId])
  claimed             Boolean   @default(false)
  status              String    @default("available")
  confirmationCode    String?
  confirmationExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  releaseDate         DateTime?

  @@index([memberId], name: "TicketMemberIndex")
}
